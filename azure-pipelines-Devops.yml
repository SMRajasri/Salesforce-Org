# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest
parameters: 
- name: CommitID
  displayName: Commit ID
  type: string
  default: ' '
- name: DeploymentType
  displayName: Deployment Type
  type: string  
  default: 'Delta' 
  values:
  - Delta
  - Src   
- name: AppNames
  displayName: Application Names
  type: string
  default: 'ALL'  
- name: Excluded
  displayName: Excluded Files/Folders  
  type: string
  default: ' '  
variables:
  COMMIT_ID: ${{ parameters.CommitID }}  
  ExcludedFiles: ${{ parameters.Excluded }} 
steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'


- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
- task: Task1@0
  inputs:
    script: |
      echo 'Installing sfdx cli'
      # npm install -g sfdx-cli
      # echo 'Installing sfdx git delta'
      # echo y | sfdx plugins:install sfdx-git-delta
- task: Task2@0
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    IgnoreFiles: $(ExcludedFiles)
  inputs:
    script: |
      $header = @{Authorization = 'Bearer $env:SYSTEM_ACCESSTOKEN'}
      $currentBranchName = $($env:BUILD_SOURCEBRANCHNAME -replace '.*/','')
      write-host "branch : $currentBranchName" 
       if($currentBranchName -eq $env:QA_ENV_NAME) {
      $url = $env:CORE_SERVER+$env:ORGANIZATION+$env:SYSTEM_TEAMPROJECT+'/_apis/release/deployments?deploymentStatus=succeeded&definitionId='+$env:DEFINITIONID+'&definitionEnvironmentId='+$env:QA_ENVIRONMENTID+'&queryOrder=descending?'+$env:API_VERSION
      }
      elseif($currentBranchName -eq $env:QAFULL_ENV_NAME){ 
      $url = $env:CORE_SERVER+$env:ORGANIZATION+$env:SYSTEM_TEAMPROJECT+'/_apis/release/deployments?deploymentStatus=succeeded&definitionId='+$env:DEFINITIONID+'&definitionEnvironmentId='+$env:QAFULL_ENVIRONMENTID+'&queryOrder=descending?'+$env:API_VERSION
      } 
      elseif($currentBranchName -eq $env:UAT_ENV_NAME){ 
      $url = $env:CORE_SERVER+$env:ORGANIZATION+$env:SYSTEM_TEAMPROJECT+'/_apis/release/deployments?deploymentStatus=succeeded&definitionId='+$env:DEFINITIONID+'&definitionEnvironmentId='+$env:UAT_ENVIRONMENTID+'&queryOrder=descending?'+$env:API_VERSION
      } 
      elseif(($env:BUILD_SOURCEBRANCH).contains($env:PROD_ENV_NAME)){
      $url = $env:CORE_SERVER+$env:ORGANIZATION+$env:SYSTEM_TEAMPROJECT+'/_apis/release/deployments?deploymentStatus=succeeded&definitionId='+$env:DEFINITIONID+'&definitionEnvironmentId='+$env:PROD_ENVIRONMENTID+'&queryOrder=descending?'+$env:API_VERSION
      }
      else{
      $url = 'https://vsrm.dev.azure.com/sivaranjaniminuscule/Salesforce%20Demo/_apis/release/deployments?deploymentStatus=succeeded&definitionId='+$env:DEFINITIONID+'&definitionEnvironmentId='+$env:UAT_ENVIRONMENTID+'&queryOrder=descending?'+$env:API_VERSION
      }
       write-host "url : $url" 
       $response = Invoke-RestMethod -Uri $url -Headers $header -Method Get
       $releaseCount = $response.Count
       Write-Host "$releaseCount"
      if('$env:COMMIT_ID' -eq ' ' -or '')
      {
          
          if($releaseCount -ne 0)
          {
            $build = $response.value
            $logicId = $($build[0].release.artifacts.definitionReference.sourceVersion.id)
            $prevCommitId = $logicId
            Write-Host "Logic"
          }
          else
          {
            Write-Host "Total Successfull Release : $releaseCount"
            $prevCommitId = $(git rev-parse HEAD^)
            
          }
      }
      else
      {
        Write-Host "Manual"
        $prevCommitId = $env:COMMIT_ID.Trim()
          
      }
      Write-Host "Previous Commit ID : $prevCommitId" 
       
      md delta
      Write-Host "Files : $env:IgnoreFiles"
      $fileSplit = $env:IgnoreFiles.Split(' ')
      New-Item .\ignorefiles 
      Set-Content .\ignorefiles  $fileSplit
            
      sfdx sgd:source:delta --from $prevCommitId -i .\ignorefiles --output delta/ --generate-delta 
      Get-Content .\delta/package/package.xml
      
      
      
      $folder = 'delta/src'
      if (!(Test-Path -Path $folder)) {
           md delta/src
      }
      
      $sourcePath = 'package/package.xml'
      $destinationPath = 'delta/src' 
      Move-Item -path $sourcePath -destination $destinationPath
      $packagePath = 'delta/package'
      $destructivePath = 'delta/destructiveChanges' 
      Remove-Item $packagePath -Recurse
      Remove-Item $destructivePath -Recurse
