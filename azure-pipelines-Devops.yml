# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest
parameters: 
- name: CommitID
  displayName: Commit ID
  type: string
  default: ' '
- name: DeploymentType
  displayName: Deployment Type
  type: string  
  default: 'Delta' 
  values:
  - Delta
  - Src   
- name: AppNames
  displayName: Application Names
  type: string
  default: 'ALL'  
- name: Excluded
  displayName: Excluded Files/Folders  
  type: string
  default: ' '  
variables:
  COMMIT_ID: ${{ parameters.CommitID }}  
  ExcludedFiles: ${{ parameters.Excluded }} 
steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'


- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
- task: Task1@0
  inputs:
    script: |
      echo 'Installing sfdx cli'
      # npm install -g sfdx-cli
      # echo 'Installing sfdx git delta'
      # echo y | sfdx plugins:install sfdx-git-delta
- task: Task2@0
  condition: and(succeeded(), eq('${{ parameters.DeploymentType }}', 'Delta'))
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    IgnoreFiles: $(ExcludedFiles)
  inputs:
    script: |
      $header = @{Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"}
            $url = "https://vsrm.dev.azure.com/sivaranjaniminuscule/Salesforce%20Demo/_apis/release/deployments?deploymentStatus=succeeded&definitionId=2&definitionEnvironmentId=2&queryOrder=descending?api-version=6.0"

            write-host "url: $url"
            
            $response = Invoke-RestMethod -Uri $url -Headers $header -Method Get
            $releaseCount = $response.count
            Write-Host "Total Successfull Release : $releaseCount"           

            $prevCommitId = ""
            if("$env:COMMIT_ID" -eq " " -or "")
            {
              if($releaseCount -ne 0)
              {
                $build = $response.value
                $logicId = $($build[0].release.artifacts.definitionReference.sourceVersion.id)
                $prevCommitId = $logicId
                Write-Host "Previous Commit ID From last successfull Release : $prevCommitId"
              }
              else
              {
                $prevCommitId = $(git rev-parse HEAD^)
                Write-Host "There is no successfull release for this Environment Id for now..."
                Write-Host "Previous Commit Id : $prevCommitId"
              }
            }
            else
            {
              $prevCommitId = $env:COMMIT_ID.Trim()
              Write-Host "Previous Commit Id : $prevCommitId"
            }